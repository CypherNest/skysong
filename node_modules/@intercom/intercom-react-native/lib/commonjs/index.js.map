{"version":3,"names":["_reactNative","require","IntercomModule","IntercomEventEmitter","NativeModules","Visibility","exports","LogLevel","IntercomEvents","IntercomUnreadCountDidChange","UNREAD_COUNT_CHANGE_NOTIFICATION","IntercomWindowDidHide","WINDOW_DID_HIDE_NOTIFICATION","IntercomWindowDidShow","WINDOW_DID_SHOW_NOTIFICATION","IntercomHelpCenterWindowDidShow","IntercomHelpCenterWindowDidHide","Space","Intercom","loginUnidentifiedUser","loginUserWithUserAttributes","userAttributes","logout","setUserHash","hash","updateUser","logEvent","eventName","metaData","arguments","length","undefined","fetchHelpCenterCollections","fetchHelpCenterCollection","id","searchHelpCenter","term","present","presentIntercom","presentSpace","space","presentIntercomSpace","presentContent","content","presentMessageComposer","initialMessage","getUnreadConversationCount","hideIntercom","setBottomPadding","paddingBottom","setInAppMessageVisibility","visibility","setLauncherVisibility","setNeedsStatusBarAppearanceUpdate","Platform","select","ios","default","handlePushMessage","android","sendTokenToIntercom","token","setLogLevel","logLevel","addEventListener","event","callback","OS","startEventListener","eventEmitter","NativeEventEmitter","listener","addListener","originalRemove","remove","removeEventListener","registerIdentifiedUser","registrationParams","registerUnidentifiedUser","displayMessenger","displayHelpCenter","helpCenter","displayMessageComposer","displayArticle","articleId","IntercomContent","articleWithArticleId","displayCarousel","carouselId","carouselWithCarouselId","displaySurvey","surveyId","surveyWithSurveyId","displayHelpCenterCollections","collections","helpCenterCollectionsWithIds","_default","ContentType","articleContent","type","Article","carouselContent","Carousel","surveyContent","Survey","collectionIds","helpCenterCollectionsContent","HelpCenterCollections","ids","conversationWithConversationId","conversationId","conversationContent","Conversation"],"sources":["index.tsx"],"sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  Platform,\n  EmitterSubscription,\n} from 'react-native';\n\nconst { IntercomModule, IntercomEventEmitter } = NativeModules;\n\n/**\n * @deprecated Please use `UserAttributes` instead.\n */\nexport type Registration = Partial<{\n  email: string;\n  userId: string;\n}>;\n\nexport enum Visibility {\n  GONE = 'GONE',\n  VISIBLE = 'VISIBLE',\n}\n\ntype VisibilityType = keyof typeof Visibility;\n\nexport enum LogLevel {\n  ASSERT = 'ASSERT',\n  DEBUG = 'DEBUG',\n  DISABLED = 'DISABLED',\n  ERROR = 'ERROR',\n  INFO = 'INFO',\n  VERBOSE = 'VERBOSE',\n  WARN = 'WARN',\n}\n\ntype LogLevelType = keyof typeof LogLevel;\n\nexport const IntercomEvents = {\n  IntercomUnreadCountDidChange:\n    IntercomEventEmitter.UNREAD_COUNT_CHANGE_NOTIFICATION,\n  IntercomWindowDidHide: IntercomEventEmitter.WINDOW_DID_HIDE_NOTIFICATION,\n  IntercomWindowDidShow: IntercomEventEmitter.WINDOW_DID_SHOW_NOTIFICATION,\n  IntercomHelpCenterWindowDidShow:\n    IntercomEventEmitter.WINDOW_DID_SHOW_NOTIFICATION,\n  IntercomHelpCenterWindowDidHide:\n    IntercomEventEmitter.WINDOW_DID_HIDE_NOTIFICATION,\n};\n\ntype EventType =\n  | 'IntercomUnreadConversationCountDidChangeNotification'\n  | 'IntercomHelpCenterDidShowNotification'\n  | 'IntercomHelpCenterDidHideNotification'\n  | 'IntercomWindowDidHideNotification'\n  | 'IntercomWindowDidShowNotification';\n\nexport type CustomAttributes = {\n  [key: string]: boolean | string | number;\n};\nexport type MetaData = {\n  [key: string]: any;\n};\n\n/**\n * @deprecated Please use `UserAttributes` instead.\n */\nexport type UpdateUserParamList = {\n  companies?: Company[];\n  customAttributes?: CustomAttributes;\n  email?: string;\n  languageOverride?: string;\n  name?: string;\n  phone?: string;\n  signedUpAt?: number;\n  unsubscribedFromEmails?: boolean;\n  userId?: string;\n};\n\nexport type UserAttributes = {\n  companies?: Company[];\n  customAttributes?: CustomAttributes;\n  email?: string;\n  languageOverride?: string;\n  name?: string;\n  phone?: string;\n  signedUpAt?: number;\n  unsubscribedFromEmails?: boolean;\n  userId?: string;\n};\n\nexport type Company = {\n  createdAt?: number;\n  customAttributes?: CustomAttributes;\n  id: string;\n  monthlySpend?: number;\n  name?: string;\n  plan?: string;\n};\n\nexport type HelpCenterArticle = {\n  it: string;\n  title: string;\n};\nexport type HelpCenterSection = {\n  title: string;\n  articles: HelpCenterArticle;\n};\nexport type HelpCenterCollectionItem = {\n  id: string;\n  title: string;\n  summary: string;\n};\nexport type HelpCenterCollectionContent = {\n  id: string;\n  title: string;\n  summary: string;\n  articles: HelpCenterArticle[];\n  sections: HelpCenterSection[];\n};\nexport type HelpCenterArticleSearchResult = {\n  id: string;\n  title: string;\n  matchingSnippet: string;\n  summary: string;\n};\n\nexport enum Space {\n  home = 'HOME',\n  helpCenter = 'HELP_CENTER',\n  messages = 'MESSAGES',\n  tickets = 'TICKETS',\n}\n\nexport type IntercomType = {\n  /**\n   * Login a unidentified user.\n   * This is a user that doesn't have any identifiable information such as a `userId` or `email`.\n   * @return {Promise<boolean>} A promise to the token.\n   */\n  loginUnidentifiedUser: () => Promise<boolean>;\n\n  /**\n   * Login a user with identifiable information.\n   * Valid identifiers are `userId` and `email` which must be set in the {@link UserAttributes} object.\n   * @param params The {@link UserAttributes} object that contains the user's `email` or `userId`.\n   */\n  loginUserWithUserAttributes: (params: UserAttributes) => Promise<boolean>;\n\n  /**\n   * Log a user out of their Intercom session.\n   * This will dismiss any Intercom UI and clear Intercom's local cache.\n   */\n  logout(): Promise<boolean>;\n\n  /**\n   * Set `hash` string if you are using Identity Verification for your Intercom workspace.\n   * @note This should be called before any user login takes place.\n   *\n   * Identity Verification helps to make sure that conversations between you and your users are kept private, and that one\n   * user can't impersonate another. If Identity Verification is enabled for your app, Intercom for iOS will sign all requests\n   * going to the Intercom servers with tokens. It requires your mobile application to have its own server which authenticates the app's users,\n   * and which can store a secret.\n   *\n   * @see More information on Identity Verification can be found {@link https://developers.intercom.com/installing-intercom/docs/react-native-identity-verification here}\n   * @param hash A HMAC digest of the user ID or email.\n   */\n  setUserHash(hash: string): Promise<boolean>;\n\n  /**\n   * Update a user in Intercom with data specified in {@link UserAttributes}.\n   * Full details of the data data attributes that can be stored on a user can be found in {@link UserAttributes}.\n   *\n   * @param userAttributes The {@link UserAttributes} object with the user data.\n   */\n  updateUser(userAttributes: UserAttributes): Promise<boolean>;\n\n  /**\n   * Log an event with a given name and metaData.\n   * You can log events in Intercom based on user actions in your app.\n   *\n   * @param eventName The name of the event.\n   * @param metaData Metadata Objects support a few simple types that Intercom can present on your behalf,\n   * see the @{https://developers.intercom.com/intercom-api-reference/reference/event-model Intercom API docs}\n   */\n  logEvent(eventName: string, metaData?: MetaData): Promise<boolean>;\n\n  /**\n   * Present Intercom as a modal overlay in your app.\n   * The `Home` space is displayed by default.\n   */\n  present(): Promise<boolean>;\n\n  /**\n   * Present an Intercom `space` as a modal overlay in your app\n   * @see {@link Space} for a list of valid spaces.\n   *\n   * @param space The Intercom space to be presented.\n   */\n  presentSpace(space: Space): Promise<boolean>;\n\n  /**\n   * Present Intercom content.\n   *\n   * An {@link IntercomContent} object.\n   */\n  presentContent(content: Content): Promise<boolean>;\n\n  /**\n   * Present the message composer.\n   *\n   * @param initialMessage An optional message that is used to pre-populate the composer with some text.\n   */\n  presentMessageComposer(initialMessage?: string): Promise<boolean>;\n\n  /**\n   * Fetch all Help Center collections.\n   *\n   * @return {Promise<Array<HelpCenterCollectionItem>>} An array of {@link HelpCenterCollectionItem} objects.\n   */\n  fetchHelpCenterCollections: () => Promise<Array<HelpCenterCollectionItem>>;\n\n  /**\n   * Fetch the contents of a Help Center collection.\n   *\n   * @param id The ID of the Help Center collection.\n   *\n   * @return {Promise<HelpCenterCollectionContent>} A {@link HelpCenterCollectionContent} object.\n   */\n  fetchHelpCenterCollection: (\n    id: string\n  ) => Promise<HelpCenterCollectionContent>;\n\n  /**\n   * Search the Help Center.\n   *\n   * @param term The search term.\n   *\n   * @return {Promise<HelpCenterArticleSearchResult>} An array of {@link HelpCenterArticleSearchResult} objects.\n   */\n  searchHelpCenter: (\n    term: string\n  ) => Promise<Array<HelpCenterArticleSearchResult>>;\n\n  /**\n   * Fetch the current number of unread conversations for the logged in User.\n   * @return {Promise<number>} the number of unread conversations.\n   */\n  getUnreadConversationCount(): Promise<number>;\n\n  /**\n   * Hide all Intercom windows that are currently displayed.\n   * This will hide the Messenger, Help Center, Articles, and in-product messages (eg. Mobile Carousels, chats, and posts).\n   */\n  hideIntercom(): Promise<boolean>;\n\n  /**\n   * Set a fixed bottom padding for in app messages and the Intercom Launcher.\n   * @param bottomPadding The size of the bottom padding in points.\n   */\n  setBottomPadding(bottomPadding: number): Promise<boolean>;\n\n  /**\n   * Show or hide the Intercom InApp Messages in your app.\n   * @note All InApp Messages are visible by default.\n   *\n   * @param visibility A boolean indicating if the InApps should be visible.\n   */\n  setInAppMessageVisibility(visibility: VisibilityType): Promise<boolean>;\n\n  /**\n   * Show or hide the Intercom Launcher in your app.\n   * @note The Launcher is hidden by default.\n   *\n   * @param visibility A boolean indicating if the Intercom Launcher should be visible.\n   */\n  setLauncherVisibility(visibility: VisibilityType): Promise<boolean>;\n\n  /**\n   * Change the Status Bar's style or visibility while an Intercom notification is on\n   * screen.\n   * Call this method so that Intercom's window can reflect your app's status bar accordingly.\n   */\n  setNeedsStatusBarAppearanceUpdate(): Promise<boolean>;\n\n  /**\n   * Handle an Android push notification payload sent by Intercom.\n   *\n   * @note Android only. iOS handles push notifications automatically.\n   */\n  handlePushMessage(): Promise<boolean>;\n\n  /**\n   * Send a device token to Intercom to enable push notifications to be sent to the User.\n   * @param token The device token to send to the server.\n   */\n  sendTokenToIntercom(token: string): Promise<boolean>;\n\n  /**\n   * Enable logging for Intercom.\n   * @param logLevel The logging level to set.\n   *\n   * @note iOS will ignore the logging level and by default shows `DEBUG` logging.\n   */\n  setLogLevel(logLevel: LogLevelType): Promise<boolean>;\n\n  /**\n   * Add an `EventListener` to listen for `IntercomUnreadCountDidChange` events.\n   *\n   * @note This function is for Android only.\n   */\n  addEventListener: (\n    event: EventType,\n    callback: (response: { count?: number; visible: boolean }) => void\n  ) => EmitterSubscription;\n\n  //////////////////////////////////////////////////////////////////////\n  // Depreacted functions. These will be removed in a future release. //\n  //////////////////////////////////////////////////////////////////////\n\n  /**\n   * @deprecated `registerIdentifiedUser` is deprecated and will be removed in a future release.  Use `loginUserWithUserAttributes` instead.\n   */\n  registerIdentifiedUser(params: Registration): Promise<boolean>;\n\n  /**\n   * @deprecated `registerUnidentifiedUser` is deprecated and will be removed in a future release.  Use `loginUnidentifiedUserWithSuccess` instead.\n   */\n  registerUnidentifiedUser(): Promise<boolean>;\n\n  /**\n   * @deprecated `updateUser` is deprecated and will be removed in a future release.  Use `updateUser` instead.\n   */\n  updateUser(params: UpdateUserParamList): Promise<boolean>;\n\n  /**\n   * @deprecated `displayMessenger` is deprecated and will be removed in a future release.  Use `present` instead.\n   */\n  displayMessenger(): Promise<boolean>;\n\n  /**\n   * @deprecated `displayHelpCenter` is deprecated and will be removed in a future release.  Use `presentSpace` instead.\n   */\n  displayHelpCenter(): Promise<boolean>;\n\n  /**\n   * @deprecated `displayMessageComposer` is deprecated and will be removed in a future release.  Use `presentMessageComposer` instead.\n   * @see presentMessageComposer for details\n   */\n  displayMessageComposer(initialMessage?: string): Promise<boolean>;\n\n  /**\n   * @deprecated `displayArticle` is deprecated and will be removed in a future release.  Use `presentContent` instead.\n   */\n  displayArticle(articleId: string): Promise<boolean>;\n\n  /**\n   * @deprecated `displayCarousel` is deprecated and will be removed in a future release.  Use `presentContent` instead.\n   */\n  displayCarousel(carouselId: string): Promise<boolean>;\n\n  /**\n   * @deprecated `displaySurvey` is deprecated and will be removed in a future release.  Use `presentContent` instead.\n   */\n  displaySurvey(surveyId: string): Promise<boolean>;\n\n  /**\n   * @deprecated `displayHelpCenterCollections` is deprecated and will be removed in a future release.  Use `presentContent` instead.\n   */\n  displayHelpCenterCollections(collections?: string[]): Promise<boolean>;\n};\n\nconst Intercom: IntercomType = {\n  loginUnidentifiedUser: () => IntercomModule.loginUnidentifiedUser(),\n  loginUserWithUserAttributes: (userAttributes) =>\n    IntercomModule.loginUserWithUserAttributes(userAttributes),\n  logout: () => IntercomModule.logout(),\n  setUserHash: (hash) => IntercomModule.setUserHash(hash),\n  updateUser: (userAttributes) => IntercomModule.updateUser(userAttributes),\n  logEvent: (eventName, metaData = undefined) =>\n    IntercomModule.logEvent(eventName, metaData),\n\n  fetchHelpCenterCollections: () => IntercomModule.fetchHelpCenterCollections(),\n  fetchHelpCenterCollection: (id = '') =>\n    IntercomModule.fetchHelpCenterCollection(id),\n  searchHelpCenter: (term = '') => IntercomModule.searchHelpCenter(term),\n\n  present: () => IntercomModule.presentIntercom(),\n  presentSpace: (space) => IntercomModule.presentIntercomSpace(space),\n  presentContent: (content) => IntercomModule.presentContent(content),\n  presentMessageComposer: (initialMessage = undefined) =>\n    IntercomModule.presentMessageComposer(initialMessage),\n  getUnreadConversationCount: () => IntercomModule.getUnreadConversationCount(),\n\n  hideIntercom: () => IntercomModule.hideIntercom(),\n  setBottomPadding: (paddingBottom) =>\n    IntercomModule.setBottomPadding(paddingBottom),\n  setInAppMessageVisibility: (visibility) =>\n    IntercomModule.setInAppMessageVisibility(visibility),\n  setLauncherVisibility: (visibility) =>\n    IntercomModule.setLauncherVisibility(visibility),\n\n  setNeedsStatusBarAppearanceUpdate: Platform.select({\n    ios: IntercomModule.setNeedsStatusBarAppearanceUpdate,\n    default: async () => true,\n  }),\n\n  handlePushMessage: Platform.select({\n    android: IntercomModule.handlePushMessage,\n    default: async () => true,\n  }),\n\n  sendTokenToIntercom: (token) => IntercomModule.sendTokenToIntercom(token),\n  setLogLevel: (logLevel) => IntercomModule.setLogLevel(logLevel),\n\n  addEventListener: (event, callback) => {\n    event === IntercomEvents.IntercomUnreadCountDidChange &&\n      Platform.OS === 'android' &&\n      IntercomEventEmitter.startEventListener();\n    const eventEmitter = new NativeEventEmitter(IntercomEventEmitter);\n    const listener = eventEmitter.addListener(event, callback);\n    const originalRemove = listener.remove;\n    listener.remove = () => {\n      event === IntercomEvents.IntercomUnreadCountDidChange &&\n        Platform.OS === 'android' &&\n        IntercomEventEmitter.removeEventListener();\n      originalRemove();\n    };\n    return listener;\n  },\n\n  /**\n   * @depreacted methods\n   */\n  registerIdentifiedUser: (registrationParams) =>\n    IntercomModule.loginUserWithUserAttributes(registrationParams),\n  registerUnidentifiedUser: () => IntercomModule.loginUnidentifiedUser(),\n  displayMessenger: () => IntercomModule.presentIntercom(),\n  displayHelpCenter: () =>\n    IntercomModule.presentIntercomSpace(Space.helpCenter),\n  displayMessageComposer: (initialMessage = undefined) =>\n    IntercomModule.presentMessageComposer(initialMessage),\n  displayArticle: (articleId: string) =>\n    IntercomModule.presentContent(\n      IntercomContent.articleWithArticleId(articleId)\n    ),\n  displayCarousel: (carouselId: string) =>\n    IntercomModule.presentContent(\n      IntercomContent.carouselWithCarouselId(carouselId)\n    ),\n  displaySurvey: (surveyId: string) =>\n    IntercomModule.presentContent(IntercomContent.surveyWithSurveyId(surveyId)),\n  displayHelpCenterCollections: (collections = [] as string[]) =>\n    IntercomModule.presentContent(\n      IntercomContent.helpCenterCollectionsWithIds(collections)\n    ),\n};\n\nexport default Intercom;\n\nexport enum ContentType {\n  Article = 'ARTICLE',\n  Carousel = 'CAROUSEL',\n  Survey = 'SURVEY',\n  HelpCenterCollections = 'HELP_CENTER_COLLECTIONS',\n  Conversation = 'CONVERSATION',\n}\n\nexport interface Content {\n  type: ContentType;\n}\n\nexport interface Article extends Content {\n  id: string;\n}\n\ninterface Carousel extends Content {\n  id: string;\n}\n\ninterface Survey extends Content {\n  id: string;\n}\n\ninterface HelpCenterCollections extends Content {\n  ids: string[];\n}\n\ninterface Conversation extends Content {\n  id: string;\n}\n\nexport type IntercomContentType = {\n  /**\n   * Create\n   */\n  articleWithArticleId: (articleId: string) => Article;\n  carouselWithCarouselId: (carouselId: string) => Carousel;\n  surveyWithSurveyId: (surveyId: string) => Survey;\n  helpCenterCollectionsWithIds: (\n    collectionIds: string[]\n  ) => HelpCenterCollections;\n  conversationWithConversationId: (conversationId: string) => Conversation;\n};\n\nexport const IntercomContent: IntercomContentType = {\n  articleWithArticleId(articleId) {\n    let articleContent = {} as Article;\n    articleContent.type = ContentType.Article;\n    articleContent.id = articleId;\n    return articleContent;\n  },\n\n  carouselWithCarouselId(carouselId) {\n    let carouselContent = {} as Carousel;\n    carouselContent.type = ContentType.Carousel;\n    carouselContent.id = carouselId;\n    return carouselContent;\n  },\n\n  surveyWithSurveyId(surveyId) {\n    let surveyContent = {} as Survey;\n    surveyContent.type = ContentType.Survey;\n    surveyContent.id = surveyId;\n    return surveyContent;\n  },\n\n  helpCenterCollectionsWithIds(collectionIds) {\n    let helpCenterCollectionsContent = {} as HelpCenterCollections;\n    helpCenterCollectionsContent.type = ContentType.HelpCenterCollections;\n    helpCenterCollectionsContent.ids = collectionIds;\n    return helpCenterCollectionsContent;\n  },\n\n  conversationWithConversationId(conversationId) {\n    let conversationContent = {} as Conversation;\n    conversationContent.type = ContentType.Conversation;\n    conversationContent.id = conversationId;\n    return conversationContent;\n  },\n};\n"],"mappings":"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"}